Sound data structures (ignore for now)
	Instrument:
		Waveform
		Envelope
		
	Note:
		

	Bar:
		Duration (Num. Interrupts)
		
		
	Music:
		Duration (Length)
		
		
		
	SFX:
		Instrument
		Loop Flag
		
	Song
	
Virtual Sound Unit:
6 channels:
Each has adjustable stereo volume, envelope, and wave-form data
Sound is generated by specifying a PERIOD for the wave-form data. The 32-sample waveform is played once in the specified time period.
The interval for playing is continuous or specified for a specific time interval, after which sound stops.
Channels 1-4
Channel 5 is capable of FM modulation and frequency sweep, using wave-form data and a separate 32-sample modulation data.
Channel 6 is a noise source.

Music Format:
Header (cast as struct and/or short array)- use offsetof() in <stddef.h> to get track offsets)
'VBM\0'- Magic Number
xxxx- Length in bytes of everything for music file.
xxxx- Flags (Bits 5-0: Track used if set)
xxxx- Reserved (master timer frequency- for this project, always 100d)
xxxx- Tempo (Number of ticks that master 100Hz timer elapses before new events can be loaded)
xxxx- Offset to Track for Channel 1
xxxx- ... Track for Channel 2
xxxx- ... 3
xxxx- ... 4
xxxx- ... 5
xxxx- ... 6

Tracks- Composed of char arrays of events. All events can be placed in all channels. Channel-specific events
on the wrong channel will be sent to the correct channel/override an event that is set to play on that channel.
Up to the composer/music software to make sure music generated plays correctly.

Beat- A unit interval for which previous events will play before loading new ones. It
is equal to Tempo/100Hz.

Priority:
Global effects > Channel-specific events > Single-channel effects > Volatile events

00 Series- Single-channel effects
00xx- Load waveform, waveform ID
01xx- Set volume, volume level (linear)
02xx- Play note, note ID (A0 through C8)
03xx- Wait note (Noop), number of Beats*
04xx- Stop note, don't care
0500xxxx- Jump, byte position relative to track*
*These events make it such that each track can be on a different beats. Take
care that music remains in sync. There may be another issue with these two
that I don't remember that makes it difficult to keep music working properly.

3Fxx- Stop reading data on this channel, don't care.

01 Series- Global effects
40xx- Set master volume, volume level (linear)
41xx- Global stop (keep reading), don't care
42xx- Global repeat (start from 00), don't care

10 Series- Channel-specific events (applies to Channel 5 and 6 only- destination implied)
80xx- Set noise profile, noise ID
81xx- Set modulation, index

11 Series- Reserved (Volatile events) (events that will modify registers more than once between
current and next event)
C0xxxxxx- Stereo pan L-to-R, number of beats to wait per increment, start vol L, end vol L
C1xxxxxx- Stereo pan R-to-L, number of beats to wait per increment, start vol R, end vol r
C2xx- Stop sweep (retain current register values**
**Need to add "stop_sound_effect_but_keep_playing routine? Think of a plane engine idling 
and increasing the speed steadily, then entering a keypress which says "maintain
current speed." This should maintain the plane engine's pitch.

Or think of a projectile moving across the screen (stereo pan) and stopping in the center
(contrived example, but whatever...). The stereo pan should stop, but it's not
known ahead of time where. 

C3xxxxxx- Frequency sweep, number of beats to wait per increment, start note ID, end note ID

